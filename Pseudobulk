## PSEUDO-bulk analysis for PGCp_PGCd

library(Seurat)
library(future)
plan("multisession", workers = 10)

#Loading samples as seurat objects

data_A1_009E = Load10X_Spatial(
  data.dir = "C:/Users/leh/OneDrive - TUNI.fi/Documents/Data/capture_area_A1_009E/outs",
  filename = "filtered_feature_bc_matrix.h5",
  assay = "Spatial",
  slice = "PGCd_009E",
  filter.matrix = TRUE,
  to.upper = FALSE,
  image = NULL
)
#7
data_D1_004E = Load10X_Spatial(
  data.dir = "C:/Users/leh/OneDrive - TUNI.fi/Documents/Data/capture_area_D1_004E/outs",
  filename = "filtered_feature_bc_matrix.h5",
  assay = "Spatial",
  slice = "PGCd_004E",
  filter.matrix = TRUE,
  to.upper = FALSE,
  image = NULL
)

data_C1_013E = Load10X_Spatial(
  data.dir = "C:/Users/leh/OneDrive - TUNI.fi/Documents/Data/capture_area_C1_013E/outs",
  filename = "filtered_feature_bc_matrix.h5",
  assay = "Spatial",
  slice = "PGCp_013E",
  filter.matrix = TRUE,
  to.upper = FALSE,
  image = NULL
)
#7
data_D1_010E = Load10X_Spatial(
  data.dir = "C:/Users/leh/OneDrive - TUNI.fi/Documents/Data/capture_area_D1_010E/outs",
  filename = "filtered_feature_bc_matrix.h5",
  assay = "Spatial",
  slice = "PGCp_010E",
  filter.matrix = TRUE,
  to.upper = FALSE,
  image = NULL
)
#A1_010B_placebo
data_A1_010B = Load10X_Spatial(
  data.dir = "C:/Users/leh/OneDrive - TUNI.fi/Documents/Data/capture_area_A1_010B/outs",
  filename = "filtered_feature_bc_matrix.h5",
  assay = "Spatial",
  slice = "FGCp_010B",
  filter.matrix = TRUE,
  to.upper = FALSE,
  image = NULL
)

data_A1_009E = SCTransform(data_A1_009E, assay = "Spatial", verbose = FALSE) # E with drug
data_D1_004E = SCTransform(data_D1_004E, assay = "Spatial", verbose = FALSE) # E with drug
data_C1_013E = SCTransform(data_C1_013E, assay = "Spatial", verbose = FALSE) # E with placebo
data_D1_010E = SCTransform(data_D1_010E, assay = "Spatial", verbose = FALSE) # E with placebo


data_drug = merge(data_C1_013E , y = c(data_D1_010E,data_D1_004E, data_A1_009E) 
                  , add.cell.ids = c("Ctrl", "Ctrl", "Drug", "Drug") ,project ="Visium_Spatial_Transcriptome")
DefaultAssay(data_drug) = "SCT"
VariableFeatures(data_drug) <- c(VariableFeatures(data_C1_013E), VariableFeatures(data_D1_010E),VariableFeatures(data_D1_004E),VariableFeatures(data_A1_009E))

DefaultAssay(data_drug) = "SCT"
data_drug = RunPCA(data_drug, verbose = F) 
data_drug = FindNeighbors(data_drug, dims = 1:30)
data_drug = FindClusters(data_drug, verbose = FALSE)
data_drug = RunUMAP(data_drug, dims = 1:30)
DimPlot(data_drug, reduction = "umap", label = T, label.size = 6, sizes.highlight = 3,  label.color = "black", pt.size = 1)
library(ggplot2)
SpatialFeaturePlot(data_drug, features = "nCount_Spatial", pt.size = 3) + theme(legend.position = "right")

# loading library
cortex_sc = readRDS(glue::glue("C:\\Users\\leh\\OneDrive - TUNI.fi\\Documents\\Data\\cap_3\\outs\\reference_gut\\Full_obj_log_counts_soupx_v2_DUOdata.RDS"))
library(dplyr)
library(SummarizedExperiment)
library(SingleCellExperiment)
logcounts(cortex_sc) = assay(cortex_sc, "X")
reference = as.Seurat(cortex_sc, "X")
reference_SCT <- Seurat::SCTransform(reference, assay = NULL) %>%
  Seurat::RunPCA(., verbose = FALSE) %>%
  Seurat::RunUMAP(., dims = 1:30, verbose = FALSE)

## Working on single cell data
cortex_sc
data_sce = as.SingleCellExperiment(data_drug)
names(assays(cortex_sc))=c("counts","logcounts")
library(SingleR)
pred <- SingleR(test=data_sce, ref=cortex_sc, labels=cortex_sc$category)

tab <- table(Assigned=pred$pruned.labels, Cluster=colLabels(data_sce))

#change single cell data and work on https://satijalab.org/seurat/articles/pbmc3k_tutorial.html
VlnPlot(data_sce, features = c("SCT", "nCount_Spatial"), ncol = 2)
pbmc = data_sce
pbmc <- subset(pbmc, subset = SCT > 200 & nCount_Spatial < 2500 ) # more focused on the cell and gene expression
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
DoHeatmap(pbmc, features = c("DEFA5", "MYC", "MUC13", "ALPI", "LYZ", "ADA")) + NoLegend()

### Extract raw counts and metadata to create SingleCellExperiment object
data_C1_013E@meta.data$sample_id = factor("p_1")
data_D1_010E@meta.data$sample_id = factor("p_2")
data_A1_009E@meta.data$sample_id = factor("d_1")
data_D1_004E@meta.data$sample_id = factor("d_2")

data_C1_013E@meta.data$group_id = factor("Ctrl")
data_D1_010E@meta.data$group_id  = factor("Ctrl")
data_A1_009E@meta.data$group_id = factor("drug")
data_D1_004E@meta.data$group_id  = factor("drug")

data_C1_013E@meta.data$patient_id = factor("Ctrl013")
data_D1_010E@meta.data$patient_id  = factor("Ctrl010")
data_A1_009E@meta.data$patient_id = factor("drug009")
data_D1_004E@meta.data$patient_id  = factor("drug004")

data_test = merge(data_C1_013E , y = c(data_D1_010E,data_D1_004E, data_A1_009E) 
                  , add.cell.ids = c("Ctrl", "Ctrl", "E_d", "E_d") ,project ="Visium_Spatial_Transcriptome")
DefaultAssay(data_test) = "SCT"
VariableFeatures(data_test) <- c(VariableFeatures(data_C1_013E), VariableFeatures(data_D1_010E),VariableFeatures(data_D1_004E),VariableFeatures(data_A1_009E))
counts = data_test@assays$Spatial@counts # to take the raw counts
data_test@meta.data$labels = factor(pred$labels)
metadata <- data_test@meta.data
# Set up metadata as desired for aggregation and DE analysis
metadata$cluster_id <- factor(data_drug@active.ident) # to take the cluster from data_drug

metadata$sample_id = factor(c(data_C1_013E@meta.data$sample_id, data_D1_010E@meta.data$sample_id, data_A1_009E@meta.data$sample_id, data_D1_004E@meta.data$sample_id))
metadata$group_id = factor(c(data_C1_013E@meta.data$group_id, data_D1_010E@meta.data$group_id, data_A1_009E@meta.data$group_id, data_D1_004E@meta.data$group_id))
metadata$patient_id = factor(c(data_C1_013E@meta.data$patient_id, data_D1_010E@meta.data$patient_id, data_A1_009E@meta.data$patient_id, data_D1_004E@meta.data$patient_id))

metadata$labels = factor(pred$pruned.labels) 

# Create single cell experiment object
sce <- SingleCellExperiment(assays = list(counts = counts), 
                            colData = metadata)

# Identify groups for aggregation of counts
groups <- colData(sce)[, c("cluster_id", "sample_id")]

### EXPLORING THE DATASET
# Load libraries
library(scater)
library(Seurat)
library(tidyverse)
library(cowplot)
library(Matrix.utils)
library(edgeR)
library(dplyr)
library(magrittr)
library(Matrix)
library(purrr)
library(reshape2)
library(S4Vectors)
library(tibble)
library(SingleCellExperiment)
library(pheatmap)
library(apeglm)
library(png)
library(DESeq2)
library(RColorBrewer)

# Explore the raw counts for the dataset
assays(sce)
#Explore the raw counts for the dataset
dim(counts(sce))
counts(sce)[1:6, 1:6]
## Explore the cellular metadata for the dataset
dim(colData(sce))
head(colData(sce))

#Acquiring necessary metrics for aggregation across cells in a sample
# Named vector of cluster names
kids <- purrr::set_names(levels(sce$cluster_id))
kids

# Total number of clusters
nk <- length(kids)
nk

# Named vector of sample names
sids <- purrr::set_names(levels(sce$sample_id))

# Total number of samples 
ns <- length(sids)
ns
# Generate sample level metadata

## Determine the number of cells per sample
table(sce$sample_id)

## Turn named vector into a numeric vector of number of cells per sample
n_cells <- as.numeric(table(sce$sample_id))

## Determine how to reoder the samples (rows) of the metadata to match the order of sample names in sids vector
m <- match(sids, sce$sample_id)

## Create the sample level metadata by combining the reordered metadata with the number of cells corresponding to each sample.
ei <- data.frame(colData(sce)[m, ], 
                 n_cells, row.names = NULL)
ei
# perform QC if not already performed
dim(sce)
sce = perCellQCMetrics(sce)
sce$is_outlier <- isOutlier(
  metric = sce$total,
  nmads = 2, type = "both", log = TRUE)

if(!require('Matrix.utils')) {
  install.packages('Matrix.utils')
  library('Matrix.utils')
  }

groups <- colData(sce)[, c("cluster_id", "sample_id")]

# Aggregate across cluster-sample groups
pb <- aggregate.Matrix(t(counts(sce)), 
                       groupings = groups, fun = "sum") 

class(pb)

dim(pb)

pb[1:6, 1:6]

# Not every cluster is present in all samples; create a vector that represents how to split samples
splitf <- sapply(stringr::str_split(rownames(pb), 
                                    pattern = "_",  
                                    n = 2), 
                 `[`, 1)
# Turn into a list and split the list into components for each cluster and transform, so rows are genes and columns are samples and make rownames as the sample IDs
pb <- split.data.frame(pb, 
                       factor(splitf)) %>%
  lapply(function(u) 
    set_colnames(t(u), 
                 stringr::str_extract(rownames(u), "(?<=_)[:alnum:]+")))

class(pb)

# Explore the different components of list
str(pb)

# Print out the table of cells in each cluster-sample group
options(width = 100)
table(sce$cluster_id, sce$sample_id)

### SAMPLE LEVEL METADATA
# Get sample names for each of the cell type clusters

# prep. data.frame for plotting
get_sample_ids <- function(x){
  pb[[x]] %>%
    colnames()
}

de_samples <- map(1:length(kids), get_sample_ids) %>%
  unlist()

# Then we can get the cluster IDs corresponding to each of the samples in the vector
# Get cluster IDs for each of the samples

samples_list <- map(1:length(kids), get_sample_ids)

get_cluster_ids <- function(x){
  rep(names(pb)[x], 
      each = length(samples_list[[x]]))
}

de_cluster_ids <- map(1:length(kids), get_cluster_ids) %>%
  unlist()

# finally, create a data frame with the cluster IDs and the corresponding sample IDs. We will merge together the condition information
# Create a data frame with the sample IDs, cluster IDs and condition

gg_df <- data.frame(cluster_id = de_cluster_ids,
                    sample_id = de_samples)

gg_df <- left_join(gg_df, ei[, c("sample_id", "group_id")]) 


metadata <- gg_df %>%
  dplyr::select(cluster_id, sample_id, group_id) 

metadata       

### SUBSETTING DATASETS to CLUSTERS of INTEREST
# Generate vector of cluster IDs
metadata$cluster_id = factor(metadata$cluster_id)
clusters <- levels(metadata$cluster_id)
clusters
### we can use this output to run the DE analysis on the Endothelial cells. Frist, we can subset the metadata and the counts to only the B cells
# Subset the metadata to only the Endothelial cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[2]), ]
head(cluster_metadata)

# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
head(cluster_metadata)

# Subset the counts to only the Epithelial cells
counts <- pb[[clusters[2]]]

cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])

# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))    

dds <- DESeqDataSetFromMatrix(cluster_counts, 
                              colData = cluster_metadata, 
                              design = ~ group_id)

# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)

# Plot PCA

DESeq2::plotPCA(rld, intgroup = "group_id")

# Hierarchical clustering
# Extract the rlog matrix from the object and compute pairwise correlation values
rld_mat <- assay(rld)
rld_cor <- cor(rld_mat)

# Plot heatmap
pheatmap(rld_cor, annotation = cluster_metadata[, c("group_id"), drop=F])

### RUN DEseq2 differential expression analysis
# Run DESeq2 differential expression analysis
dds <- DESeq(dds)
# Plot dispersion estimates
plotDispEsts(dds)

### RESULTS
# Output results of Wald test for contrast for stim vs ctrl
levels(cluster_metadata$group_id)[2]
levels(cluster_metadata$group_id)[1]

contrast <- c("group_id", levels(cluster_metadata$group_id)[2], levels(cluster_metadata$group_id)[1])

# resultsNames(dds)
res <- results(dds, 
               contrast = contrast,
               alpha = 0.05)

res <- lfcShrink(dds, 
                 contrast =  contrast,
                 res=res)

# Table of results for all genes
# Turn the results object into a tibble for use with tidyverse functions
res_tbl <- res %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>%
  as_tibble()

# Check results output
res_tbl


# Write all results to file
write.csv(res_tbl,
          paste0("C:\\Users\\leh\\OneDrive - TUNI.fi\\Documents\\Data\\merge_data", clusters[1], "_", levels(cluster_metadata$sample)[2], "_vs_", levels(cluster_metadata$sample)[1], "_all_genes.csv"),
          quote = FALSE, 
          row.names = FALSE)

# Table of results for significant genes
# Set thresholds
padj_cutoff <- 0.05

# Subset the significant results
sig_res <- dplyr::filter(res_tbl, padj < padj_cutoff) %>%
  dplyr::arrange(padj)

# Check significant genes output
sig_res

# Write significant results to file
write.csv(sig_res,
          paste0("C:\\Users\\leh\\OneDrive - TUNI.fi\\Documents\\Data\\merge_data", clusters[1], "_", levels(cluster_metadata$sample)[2], "_vs_", levels(cluster_metadata$sample)[1], "_sig_genes.csv"),
          quote = FALSE, 
          row.names = FALSE)

# Scatterplot of normalized expression of top 20 most significant genes
## ggplot of top genes
normalized_counts <- counts(dds, 
                            normalized = TRUE)

## Order results by padj values
top20_sig_genes <- sig_res %>%
  dplyr::arrange(padj) %>%
  dplyr::pull(gene) %>%
  head(n=20)


top20_sig_norm <- data.frame(normalized_counts) %>%
  rownames_to_column(var = "gene") %>%
  dplyr::filter(gene %in% top20_sig_genes)

gathered_top20_sig <- top20_sig_norm %>%
  gather(colnames(top20_sig_norm)[2:length(colnames(top20_sig_norm))], key = "samplename", value = "normalized_counts")

gathered_top20_sig <- inner_join(ei[, c("sample_id", "group_id" )], gathered_top20_sig, by = c("sample_id" = "samplename"))

## plot using ggplot2
ggplot(gathered_top20_sig) +
  geom_point(aes(x = gene, 
                 y = normalized_counts, 
                 color = group_id), 
             position=position_jitter(w=0.1,h=0)) +
  scale_y_log10() +
  xlab("Genes") +
  ylab("log10 Normalized Counts") +
  ggtitle("Top 20 Significant DE Genes") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  theme(plot.title = element_text(hjust = 0.5))

# Heatmap of all significant genes
# Extract normalized counts for only the significant genes
sig_norm <- data.frame(normalized_counts) %>%
  rownames_to_column(var = "gene") %>%
  dplyr::filter(gene %in% sig_res$gene)

# Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")

# Run pheatmap using the metadata data frame for the annotation
pheatmap(sig_norm[ , 2:length(colnames(sig_norm))], 
         color = heat_colors, 
         cluster_rows = T, 
         show_rownames = F,
         annotation = cluster_metadata[, c("group_id", "cluster_id")], 
         border_color = NA, 
         fontsize = 10, 
         scale = "row", 
         fontsize_row = 10, 
         height = 20)        


# Extract the rlog matrix from the object and compute pairwise correlation values
rld_mat <- assay(rld)
rld_cor <- cor(rld_mat)

# Plot heatmap
pheatmap(rld_cor, annotation = cluster_metadata[, c("group_id"), drop=F])

sig_res <- dplyr::filter(res_tbl, padj < padj_cutoff_1) %>%
  dplyr::arrange(padj)

# Volcano plot of results
## Obtain logical vector where TRUE values denote padj values < 0.05 and fold change > 1.5 in either direction
res_table_thres <- res_tbl %>% 
  mutate(threshold = padj < 0.05 & abs(log2FoldChange) >= 0.58)

## Volcano plot
ggplot(res_table_thres) +
  geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
  ggtitle("Volcano plot of Endothelial cells relative to control") +
  xlab("log2 fold change") + 
  ylab("-log10 adjusted p-value") +
  scale_y_continuous(limits = c(0,50)) +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25)))     
